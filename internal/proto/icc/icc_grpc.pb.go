// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package icc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ICCClient is the client API for ICC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ICCClient interface {
	// Issue Pre-Sign request
	// For Pre-Sign upload request, the client should send HTTP PUT request
	// ~~For Pre-Sign download request, the client should send HTTP GET request~~
	IssuePreSignUpload(ctx context.Context, in *PreSignObjectRequest, opts ...grpc.CallOption) (*PreSignObjectResponse, error)
	CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error)
	GetImage(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error)
	GetRandomImage(ctx context.Context, in *GetRandomImageRequest, opts ...grpc.CallOption) (*GetRandomImageResponse, error)
	AddTagsToImage(ctx context.Context, in *AddTagToImageRequest, opts ...grpc.CallOption) (*AddTagToImageResponse, error)
}

type iCCClient struct {
	cc grpc.ClientConnInterface
}

func NewICCClient(cc grpc.ClientConnInterface) ICCClient {
	return &iCCClient{cc}
}

func (c *iCCClient) IssuePreSignUpload(ctx context.Context, in *PreSignObjectRequest, opts ...grpc.CallOption) (*PreSignObjectResponse, error) {
	out := new(PreSignObjectResponse)
	err := c.cc.Invoke(ctx, "/icc.ICC/IssuePreSignUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCCClient) CompleteUpload(ctx context.Context, in *CompleteUploadRequest, opts ...grpc.CallOption) (*CompleteUploadResponse, error) {
	out := new(CompleteUploadResponse)
	err := c.cc.Invoke(ctx, "/icc.ICC/CompleteUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCCClient) GetImage(ctx context.Context, in *GetImagesRequest, opts ...grpc.CallOption) (*GetImagesResponse, error) {
	out := new(GetImagesResponse)
	err := c.cc.Invoke(ctx, "/icc.ICC/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCCClient) GetRandomImage(ctx context.Context, in *GetRandomImageRequest, opts ...grpc.CallOption) (*GetRandomImageResponse, error) {
	out := new(GetRandomImageResponse)
	err := c.cc.Invoke(ctx, "/icc.ICC/GetRandomImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iCCClient) AddTagsToImage(ctx context.Context, in *AddTagToImageRequest, opts ...grpc.CallOption) (*AddTagToImageResponse, error) {
	out := new(AddTagToImageResponse)
	err := c.cc.Invoke(ctx, "/icc.ICC/AddTagsToImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICCServer is the server API for ICC service.
// All implementations must embed UnimplementedICCServer
// for forward compatibility
type ICCServer interface {
	// Issue Pre-Sign request
	// For Pre-Sign upload request, the client should send HTTP PUT request
	// ~~For Pre-Sign download request, the client should send HTTP GET request~~
	IssuePreSignUpload(context.Context, *PreSignObjectRequest) (*PreSignObjectResponse, error)
	CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error)
	GetImage(context.Context, *GetImagesRequest) (*GetImagesResponse, error)
	GetRandomImage(context.Context, *GetRandomImageRequest) (*GetRandomImageResponse, error)
	AddTagsToImage(context.Context, *AddTagToImageRequest) (*AddTagToImageResponse, error)
	mustEmbedUnimplementedICCServer()
}

// UnimplementedICCServer must be embedded to have forward compatible implementations.
type UnimplementedICCServer struct {
}

func (UnimplementedICCServer) IssuePreSignUpload(context.Context, *PreSignObjectRequest) (*PreSignObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuePreSignUpload not implemented")
}
func (UnimplementedICCServer) CompleteUpload(context.Context, *CompleteUploadRequest) (*CompleteUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteUpload not implemented")
}
func (UnimplementedICCServer) GetImage(context.Context, *GetImagesRequest) (*GetImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedICCServer) GetRandomImage(context.Context, *GetRandomImageRequest) (*GetRandomImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomImage not implemented")
}
func (UnimplementedICCServer) AddTagsToImage(context.Context, *AddTagToImageRequest) (*AddTagToImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTagsToImage not implemented")
}
func (UnimplementedICCServer) mustEmbedUnimplementedICCServer() {}

// UnsafeICCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ICCServer will
// result in compilation errors.
type UnsafeICCServer interface {
	mustEmbedUnimplementedICCServer()
}

func RegisterICCServer(s grpc.ServiceRegistrar, srv ICCServer) {
	s.RegisterService(&ICC_ServiceDesc, srv)
}

func _ICC_IssuePreSignUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreSignObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICCServer).IssuePreSignUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icc.ICC/IssuePreSignUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICCServer).IssuePreSignUpload(ctx, req.(*PreSignObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICC_CompleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICCServer).CompleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icc.ICC/CompleteUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICCServer).CompleteUpload(ctx, req.(*CompleteUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICC_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICCServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icc.ICC/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICCServer).GetImage(ctx, req.(*GetImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICC_GetRandomImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICCServer).GetRandomImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icc.ICC/GetRandomImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICCServer).GetRandomImage(ctx, req.(*GetRandomImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ICC_AddTagsToImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTagToImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICCServer).AddTagsToImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/icc.ICC/AddTagsToImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICCServer).AddTagsToImage(ctx, req.(*AddTagToImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ICC_ServiceDesc is the grpc.ServiceDesc for ICC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ICC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "icc.ICC",
	HandlerType: (*ICCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssuePreSignUpload",
			Handler:    _ICC_IssuePreSignUpload_Handler,
		},
		{
			MethodName: "CompleteUpload",
			Handler:    _ICC_CompleteUpload_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _ICC_GetImage_Handler,
		},
		{
			MethodName: "GetRandomImage",
			Handler:    _ICC_GetRandomImage_Handler,
		},
		{
			MethodName: "AddTagsToImage",
			Handler:    _ICC_AddTagsToImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/icc/icc.proto",
}
